<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper SYSTEM "E:\workspace\salary_3\mybatisJavaCodeGenerate\src\main\java\imitate\mybatis\code\generation\builder\xml\entity.dtd">
<mapper fileType="ServiceImpl">
	<bodyCode>
		package ${formPackage};
		import java.io.Serializable;
		import com.sx.common.util.json.JackJsonUtil;
		import com.fasterxml.jackson.annotation.JsonInclude;
		import com.sx.common.util.BeanUtils;
		import io.swagger.annotations.ApiModel;
		import io.swagger.annotations.ApiModelProperty;
		import org.apache.commons.lang3.StringUtils;
		
		/**${table_comment} form 类**/
		@ApiModel(description = "${table_comment}")
		public class ${formName} extends BaseForm implements Serializable {
		
		/** 序列化 */
		private static final long serialVersionUID = ${serialVersionUID}L;
		
		//属性字段部分
		${attributeFields}
		
		//构造方法部分
		${constractor}
		
		//get 、set代码部分
		${getSetMethod}

		public ${formName} convertToPO() {
		${poName} po = new ${poName}();
		try {
		BeanUtils.copyProperties(this, po, false);
		} catch (Exception e) {
		e.printStackTrace();
		}
		return po;
		}
		//新增方法验证
		public boolean addValidate(${resultObjectVO}&lt;${formName}&gt; result) {
		result.setSuccess(false);
		//if (StringUtils.isBlank(this.getConsumer_name())) {
		//	resInfo.falseMsg("e.person.name.is.null");
		//	return false;
		//}
		result.setSuccess(true);
		return true;
		}
		//编辑方法验证
		public boolean updateValidate(${resultObjectVO}&lt;${formName}&gt; result) {
		result.setSuccess(false);
		//if (StringUtils.isBlank(this.getConsumer_name())) {
		//	result.falseMsg("e.person.name.is.null");
		//	return false;
		//}
		result.setSuccess(true);
		return true;
		}
		
		@Override
		public String toString() {
		return "${formName}:"+JackJsonUtil.objToJson(this);
		}
		}
		//end class // @Null 被注释的元素必须为 null
		// @NotNull 被注释的元素必须不为 null
		// @AssertTrue 被注释的元素必须为 true
		// @AssertFalse 被注释的元素必须为 false
		// @Min(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值
		// @Max(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值
		// @DecimalMin(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值
		// @DecimalMax(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值
		// @Size(max=, min=) 被注释的元素的大小必须在指定的范围内
		// @Digits (integer, fraction) 被注释的元素必须是一个数字，其值必须在可接受的范围内
		// @Past 被注释的元素必须是一个过去的日期
		// @Future 被注释的元素必须是一个将来的日期
		// @Pattern(regex=,flag=) 被注释的元素必须符合指定的正则表达式
		// @NotBlank(message =) 验证字符串非null，且长度必须大于0
		// @Email 被注释的元素必须是电子邮箱地址
		// @Length(min=,max=) 被注释的字符串的大小必须在指定的范围内
		// @NotEmpty 被注释的字符串的必须非空
		// @Range(min=,max=,message=) 被注释的元素必须在合适的范围内

	</bodyCode>
</mapper>